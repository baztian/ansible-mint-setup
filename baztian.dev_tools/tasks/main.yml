---
- name: Install various dev packages
  apt:
    pkg: "{{ various_dev_apt_packages }}"
  tags: various_dev_apt_packages
- name: Add Insomnia signing key on remote server to keyring
  apt_key:
    url: https://insomnia.rest/keys/debian-public.key.asc
    id: 8756C4F765C9AC3CB6B85D62379CE192D401AB61
    state: present
  tags: insomnia
- name: Add apt repo for Insomnia
  apt_repository:
    repo: "deb https://dl.bintray.com/getinsomnia/Insomnia /"
    state: present
  tags: insomnia
- name: Install Insomnia
  apt:
    pkg: insomnia
  tags: insomnia
- name: Create launcher directory
  file:
    path: /usr/local/share/applications
    state: directory
  tags: postman,insomnia
- name: Install ansible
  include_role:
    name: baztian.pip_venv
    apply:
      tags:
        - ansible
  vars:
      pkg: ansible
      version: 2.8.5
      bin:
        - ansible
        - ansible-config
        - ansible-connection
        - ansible-console
        - ansible-doc
        - ansible-galaxy
        - ansible-inventory
        - ansible-playbook
        - ansible-pull
        - ansible-vault
  tags: ansible
- name: Install ansible-lint
  include_role:
    name: baztian.pip_venv
    apply:
      tags:
        - ansible_lint
  vars:
      pkg: ansible-lint
      version: 4.1.0
  tags: ansible_lint
- name: Install yq
  include_role:
    name: baztian.pip_venv
    apply:
      tags:
        - yq
  vars:
      pkg: yq
      version: 2.8.0
  tags: yq
- name: Install jpterm
  include_role:
    name: baztian.pip_venv
    apply:
      tags:
        - jpterm
  vars:
      pkg: jmespath-terminal
      version: 0.2.1
      bin: jpterm
  tags: jpterm
- name: Check if jid already installed
  stat:
    path: /opt/jid-{{ jid_version }}
  register: jid_directory
  tags: jid
- name: Download jid
  get_url:
    url: "https://github.com/simeji/jid/releases/download/v{{ jid_version }}/jid_linux_amd64.zip"
    checksum: "sha256:{{ jid_sha256 }}"
    dest: "/tmp/jid-{{ jid_version }}.zip"
  tags: jid
  when: not jid_directory.stat.exists
- name: Create jid directory
  file:
    path: "/opt/jid-{{ jid_version }}"
    state: directory
  tags: jid
- name: Install jid
  unarchive:
    src: "/tmp/jid-{{ jid_version }}.zip"
    dest: "/opt/jid-{{ jid_version }}"
    remote_src: yes
  tags: jid
  when: not jid_directory.stat.exists
- name: Symlink default jid
  file:
    src: "jid-{{ jid_version }}"
    dest: "/opt/jid"
    state: link
  tags: jid
- name: Symlink jid bin
  file:
    src: "/opt/jid/jid"
    dest: "/usr/local/bin/jid"
    state: link
  tags: jid
- name: Check if Postman App already installed
  stat:
    path: /opt/Postman-{{ postman_version }}
  register: postman_directory
  tags: postman
- name: Install packages required by Postman App
  # https://learning.getpostman.com/docs/postman/launching_postman/installation_and_updates/#linux-installation
  apt:
    pkg:
      - libgconf-2-4
  tags: postman
- name: Download Postman App
  get_url:
    url: https://dl.pstmn.io/download/version/{{ postman_version }}/linux64
    checksum: "sha1:{{ postman_sha1 }}"
    dest: /tmp/Postman-{{ postman_version }}.tar.gz
  when: not postman_directory.stat.exists
  tags: postman
- name: Create Postman app directory
  file:
    path: /opt/Postman-{{ postman_version }}
    state: directory
  tags: postman
- name: Unarchive Postman App
  unarchive:
    src: /tmp/Postman-{{ postman_version }}.tar.gz
    extra_opts:
      - "--strip-components=1"
    dest: /opt/Postman-{{ postman_version }}
    remote_src: yes
  when: not postman_directory.stat.exists
  tags: postman
- name: Symlink default Postman version
  file:
    src: "Postman-{{ postman_version }}"
    dest: "/opt/Postman"
    state: link
  tags: postman
- name: Copy Postman App desktop launcher
  template:
    src: templates/postman.desktop.j2
    dest: /usr/local/share/applications/postman.desktop
  tags: postman
- name: Gather installed packages
  package_facts:
  tags: ms_teams
- name: Gather installed packages
  package_facts:
  tags: ripgrep
  when: ansible_facts.packages['ripgrep']|default('undefined') != ripgrep_version
- name: Download ripgrep {{ ripgrep_version }}
  get_url:
    url: https://github.com/BurntSushi/ripgrep/releases/download/{{ ripgrep_version }}/ripgrep_{{ ripgrep_version }}_amd64.deb
    checksum: "sha1:{{ ripgrep_sha1 }}"
    dest: /tmp/ripgrep_{{ ripgrep_version }}_amd64.deb
  tags: ripgrep
  when: ansible_facts.packages['ripgrep']|default('undefined') != ripgrep_version
- name: Install ripgrep {{ ripgrep_version }}
  apt:
    deb: /tmp/ripgrep_{{ ripgrep_version }}_amd64.deb
  tags: ripgrep
